// -------------------------------// Kevin T. Manley// CSE 593// -------------------------------package MiddleWareImpl;import java.util.*;import GlobalIdentifiers.ItemType;import ResImpl.RMHashtable;import ResImpl.RMItem;public class Customer extends RMItem{	/**	 * 	 */	private static final long serialVersionUID = -1429418475905555679L;		private int m_nID;	private RMHashtable m_Reservations;	public Customer(int id) {		super();		m_Reservations = new RMHashtable();		m_nID=id;	}	public void setID( int id )	{ m_nID=id; }	public int getID()	{ return m_nID; }	public void reserve( String key, String location, int price, ItemType itemType )	{		ReservedItem reservedItem = getReservedItem( key );		if( reservedItem == null ) 		{			// customer doesn't already have a reservation for this resource, so create a new one now			reservedItem = new ReservedItem( key, location, 1, price, itemType );		} 		else 		{			synchronized(reservedItem)			{				reservedItem.setCount( reservedItem.getCount() + 1 );				// NOTE: latest price overrides existing price				reservedItem.setPrice( price );			}		}		synchronized(m_Reservations)		{			m_Reservations.put( reservedItem.getKey(), reservedItem );		}	}	public ReservedItem getReservedItem( String key )	{		ReservedItem reservedItem = (ReservedItem) m_Reservations.get( key );		return reservedItem;	}	public String getBill()	{		String s = "Bill for customer " + m_nID + "\n";		Object key = null;		for (Enumeration e = m_Reservations.keys(); e.hasMoreElements(); ) {			key = e.nextElement();			ReservedItem item = (ReservedItem) m_Reservations.get( key );			s = s + item.getCount() + " " + item.getReservableItemKey() + " $" + item.getPrice() + "\n";		}		return s;	}	public String toString()	{ 		return "--- BEGIN CUSTOMER key='" + getKey() + "', id='" + getID() + "', reservations=>\n" +		m_Reservations.toString() + "\n" +		"--- END CUSTOMER ---"; 	}	public static String getKey( int customerID )	{		String s = "customer-" + customerID;		return s.toLowerCase();	}	public String getKey()	{		return Customer.getKey( getID() );	}	/**	 * @return a reference to the ReservedItems RMHashtable	 */	public RMHashtable getReservations()	{		return m_Reservations;	}		public Customer clone()	{		Customer clone = new Customer(m_nID);				synchronized(m_Reservations)		{			for(Map.Entry<String, ReservedItem> kvpair : (Set<Map.Entry<String, ReservedItem>>)m_Reservations.entrySet())			{				String key = new String(kvpair.getKey());				ReservedItem value = kvpair.getValue().clone();				clone.m_Reservations.put(key, value);			}		}		return clone;	}}